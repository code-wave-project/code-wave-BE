name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
  AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
  CONTAINER_NAME: web-ide-task

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Spring Boot App to AWS ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Spring Boot JAR (Skipping Tests)
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/${{ env.AWS_ECR_REPOSITORY }}"
          docker build -t $IMAGE_URI:latest -t $IMAGE_URI:$IMAGE_TAG .
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Download ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.AWS_ECS_SERVICE }} \
          --query taskDefinition > task-definition.json

      - name: Render New Task Definition with New Image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.AWS_ECS_SERVICE }}
          cluster: ${{ env.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true
